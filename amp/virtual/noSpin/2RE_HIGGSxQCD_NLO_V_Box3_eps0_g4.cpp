
#include "AMP_HEADER.h"

double Eval_V_B3 (AMP_ARGS)
{

  AMP_DEFINITIONS
  HP_REFS_PHIxQCD(hp)
  AP_REFS_V(ap)

    
  c_double& cg  = I4_0_T11_0_T12_MT2_MT2_0_0_MT2_MT2_MU2_0;
  c_double& cg1 = I4_0_T11_0_T12_MT2_MT2_0_0_MT2_MT2_MU2_1;
  // c_double& cg3 = I4_0_T12_0_T11_MT2_MT2_0_0_MT2_MT2_MU2_0;
  // c_double& cg5 = I4_0_T12_0_T11_MT2_MT2_0_0_MT2_MT2_MU2_1;

  double t1;
  double t101;
  double t104;
  double t109;
  double t11;
  double t115;
  double t116;
  double t118;
  double t12;
  double t120;
  double t121;
  double t124;
  double t13;
  double t132;
  double t141;
  double t147;
  double t15;
  double t166;
  double t169;
  double t17;
  double t170;
  double t174;
  double t177;
  double t179;
  double t18;
  double t19;
  double t2;
  double t21;
  double t22;
  double t23;
  double t24;
  double t25;
  double t28;
  double t29;
  double t31;
  double t32;
  double t35;
  double t38;
  double t39;
  double t4;
  double t40;
  double t42;
  double t43;
  double t44;
  double t45;
  double t46;
  double t47;
  double t48;
  double t5;
  double t51;
  double t52;
  double t56;
  double t59;
  double t60;
  double t65;
  double t69;
  double t7;
  double t73;
  double t74;
  double t75;
  double t78;
  double t81;
  double t84;
  double t85;
  double t86;
  double t92;
  double t95;
  double t97;
  t1 = beta * beta;
  t2 = t1 * t1;
  t4 = y * y;
  t5 = t4 * t4;
  t7 = 0.2e1 * t2 * s * t5;
  t11 = t1 * s * t4;
  t12 = 0.5e1 * t11;
  t13 = t1 * t4;
  t15 = 0.3e1 * s;
  t17 = beta_y + 0.1e1;
  t18 = t17 * t17;
  t19 = 0.1e1 / t18;
  t21 = beta_y - 0.1e1;
  t22 = t21 * t21;
  t23 = 0.1e1 / t22;
  t24 = RE(I2_MT2_0_MT2_MU2_0);
  t25 = t23 * t24;
  t28 = t1 * beta;
  t29 = s * s;
  t31 = t4 * y;
  t32 = t28 * t29 * t31;
  t35 = 0.5e1 * t28 * s * t31;
  t38 = 0.4e1 * t1 * t29 * t4;
  t39 = 0.17e2 * t11;
  t40 = 0.8e1 * t13;
  t42 = 0.5e1 * beta_y * t29;
  t43 = beta_y * s;
  t44 = 0.23e2 * t43;
  t45 = 0.2e1 * t29;
  t46 = 0.16e2 * beta_y;
  t47 = 0.11e2 * s;
  t48 = -t32 + t35 + t38 - t39 + t40 - t42 + t44 + t45 - t46 - t47 + 0.12e2;
  t51 = 0.1e1 / (t43 - s + 0.2e1);
  t52 = RE(I2_T11_0_MT2_MU2_0);
  t56 = -t32 + t35 - t38 + t39 - t40 - t42 + t44 - t45 - t46 + t47 - 0.12e2;
  t59 = 0.1e1 / (t43 + s - 0.2e1);
  t60 = RE(I2_T12_0_MT2_MU2_0);
  t65 = t11 - s + 0.4e1;
  t69 = RE(I1_MT2_MU2_0);
  t73 = 0.2e1 * t11;
  t74 = 0.7e1 * t43;
  t75 = 0.8e1 * beta_y;
  t78 = RE(I3_0_T11_MT2_0_0_MT2_MU2_0);
  t81 = t29 * t17;
  t84 = 0.1e1 / t65;
  t85 = (-t15 + 0.8e1) * t84;
  t86 = RE(I3_0_T11_MT2_0_0_MT2_MU2_1);
  t92 = RE(I3_0_T12_MT2_0_0_MT2_MU2_0);
  t95 = t29 * t21;
  t97 = RE(I3_0_T12_MT2_0_0_MT2_MU2_1);
  t101 = 0.3e1 * t43;
  t104 = RE(I3_MT2_0_T11_0_MT2_MT2_MU2_0);
  t109 = RE(I3_MT2_0_T12_0_MT2_MT2_MU2_0);
  t115 = (-0.3e1 * t11 + t40 - 0.5e1 * s + 0.24e2) * t29;
  t116 = RE(cg);
  t118 = t29 * s;
  t120 = t118 * t18 * t22;
  t121 = RE(cg1);
  t124 = -0.16e2 * (0.8e1 * t2 * t5 + t12 - 0.12e2 * t13 - t15 - t7 + 0.12e2) * t19 * t25 + 0.16e2 * t48 * t23 * t51 * t52 + 0.16e2 * t56 * t19 * t59 * t60 - 0.16e2 * (0.2e1 - s) * t65 * s * t51 * t59 * t69 + 0.2e1 * (t73 - t74 + t75 + s) * s * t78 + 0.2e1 * t81 * t22 * t85 * t86 + 0.2e1 * (t73 + t74 - t75 + s) * s * t92 - 0.2e1 * t95 * t18 * t85 * t97 + 0.2e1 * (-t101 + t75 + t15 - 0.16e2) * s * t104 - 0.2e1 * (-t101 + t75 - t15 + 0.16e2) * s * t109 + t116 * t115 + t120 * t85 * t121;
  t132 = 0.2e1 * s;
  t141 = 0.3e1 * beta_y;
  t147 = t22 * t84;
  t166 = (0.3e1 * t13 + 0.5e1) * t118;
  t169 = t29 * t29;
  t170 = t169 * t18;
  t174 = -0.32e2 * (t7 - t12 - 0.4e1 * t13 + t15 - 0.4e1) * t19 * t25 + 0.32e2 * (t11 - t101 + t132 - 0.2e1) * t23 * t52 + 0.32e2 * (t11 + t101 + t132 - 0.2e1) * t19 * t60 + 0.4e1 * (t141 + 0.1e1) * t29 * t78 + 0.12e2 * t118 * t17 * t147 * t86 - 0.4e1 * (t141 - 0.1e1) * t29 * t92 - 0.12e2 * t118 * t21 * t18 * t84 * t97 + 0.12e2 * t95 * t104 - 0.12e2 * t81 * t109 + 0.2e1 * t166 * t116 + 0.6e1 * t170 * t147 * t121;
  t177 = IM(cg);
  t179 = IM(cg1);
  return(At_fH_re * t124 * PREF_V_CA + Bt_fA_re * t174 * PREF_V_CA + At_fH_im * (t120 * t179 * t85 + t115 * t177) * PREF_V_CA + Bt_fA_im * (0.6e1 * t147 * t170 * t179 + 0.2e1 * t166 * t177) * PREF_V_CA);
}
