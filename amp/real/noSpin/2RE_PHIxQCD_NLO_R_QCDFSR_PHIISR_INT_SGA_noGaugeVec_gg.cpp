
#include "AMP_HEADER.h"

double Eval_R_FSR_ISR_SGA (AMP_ARGS)
{

  AMP_DEFINITIONS;
  HP_REFS_PHIxQCD(hp);
  AP_REFS_R(ap);



  double t1;
  double t101;
  double t102;
  double t105;
  double t106;
  double t11;
  double t112;
  double t119;
  double t12;
  double t123;
  double t126;
  double t129;
  double t13;
  double t135;
  double t14;
  double t143;
  double t144;
  double t154;
  double t157;
  double t16;
  double t160;
  double t161;
  double t163;
  double t164;
  double t166;
  double t167;
  double t168;
  double t169;
  double t17;
  double t178;
  double t18;
  double t189;
  double t190;
  double t2;
  double t20;
  double t21;
  double t217;
  double t22;
  double t222;
  double t23;
  double t230;
  double t237;
  double t24;
  double t25;
  double t250;
  double t255;
  double t258;
  double t259;
  double t26;
  double t27;
  double t28;
  double t29;
  double t3;
  double t30;
  double t31;
  double t32;
  double t35;
  double t36;
  double t38;
  double t4;
  double t40;
  double t41;
  double t42;
  double t43;
  double t45;
  double t47;
  double t48;
  double t49;
  double t5;
  double t50;
  double t51;
  double t52;
  double t53;
  double t54;
  double t55;
  double t59;
  double t6;
  double t61;
  double t62;
  double t63;
  double t64;
  double t65;
  double t66;
  double t67;
  double t68;
  double t69;
  double t7;
  double t70;
  double t71;
  double t72;
  double t73;
  double t74;
  double t75;
  double t76;
  double t77;
  double t78;
  double t79;
  double t81;
  double t82;
  double t83;
  double t85;
  double t86;
  double t88;
  double t9;
  double t90;
  double t92;
  double t93;
  double t95;
  double t98;
  t1 = sp(p2, p3);
  t2 = t1 * t1;
  t3 = sp(p1, p3);
  t4 = t1 * t3;
  t5 = t2 + t4;
  t6 = 0.1e1 / t1;
  t7 = t5 * t6;
  t9 = t1 + t3;
  t11 = 0.1e1 / t3 / t9;
  t12 = sp(p1, p2);
  t13 = t11 * t12;
  t14 = t7 * t13;
  t16 = t9 * t9;
  t17 = 0.1e1 / t16;
  t18 = t5 * t17;
  t20 = -0.64e2 * t14 + 0.128e3 * t18;
  t21 = sp(k2, p2);
  t22 = 0.1e1 / t21;
  t23 = t20 * t22;
  t24 = -t5;
  t25 = t24 * t6;
  t26 = t25 * t13;
  t27 = 0.64e2 * t26;
  t28 = t24 * t17;
  t29 = 0.128e3 * t28;
  t30 = -t27 + t29;
  t31 = sp(k2, p1);
  t32 = 0.1e1 / t31;
  t35 = sp(k1, p3);
  t36 = 0.1e1 / t35;
  t38 = sp(k1, p1);
  t40 = t3 * t3;
  t41 = -t4 - t40;
  t42 = t41 * t6;
  t43 = t42 * t13;
  t45 = t41 * t17;
  t47 = -0.64e2 * t43 + 0.128e3 * t45;
  t48 = t47 * t22;
  t49 = -t41;
  t50 = t49 * t6;
  t51 = t50 * t13;
  t52 = 0.64e2 * t51;
  t53 = t49 * t17;
  t54 = 0.128e3 * t53;
  t55 = -t52 + t54;
  t59 = sp(k1, p2);
  t61 = -t1 + t3;
  t62 = t61 * t6;
  t63 = t12 * t12;
  t64 = t11 * t63;
  t65 = t62 * t64;
  t66 = 0.64e2 * t65;
  t67 = t61 * t17;
  t68 = t67 * t12;
  t69 = 0.128e3 * t68;
  t70 = -t66 + t69;
  t71 = t70 * t22;
  t72 = -t61;
  t73 = t72 * t6;
  t74 = t73 * t64;
  t75 = 0.64e2 * t74;
  t76 = t72 * t17;
  t77 = t76 * t12;
  t78 = 0.128e3 * t77;
  t79 = -t75 + t78;
  t81 = sp(k2, p3);
  t82 = 0.1e1 / t81;
  t83 = t20 * t82;
  t85 = t47 * t82;
  t86 = t85 * t21;
  t88 = 0.1e1 / t59;
  t90 = t30 * t82;
  t92 = t55 * t82;
  t93 = t92 * t21;
  t95 = 0.1e1 / t38;
  t98 = sp(k1, k2);
  t101 = 0.64e2 * t7 * t11;
  t102 = 0.1e1 / t12;
  t105 = 0.128e3 * t5 * t102 * t17;
  t106 = t105 - t101;
  t112 = t38 * t38;
  t119 = 0.128e3 * t102 * t17 * t24 - 0.64e2 * t11 * t25;
  t123 = -t2 - 0.2e1 * t4 - t40;
  t126 = 0.64e2 * t123 * t6 * t11;
  t129 = 0.128e3 * t123 * t102 * t17;
  t135 = 0.128e3 * t102 * t17 * t41 - 0.64e2 * t11 * t42;
  t143 = 0.64e2 * t62 * t13;
  t144 = 0.128e3 * t67;
  t154 = t21 * t31;
  t157 = 0.64e2 * t50 * t11;
  t160 = 0.128e3 * t49 * t102 * t17;
  t161 = -t157 + t160;
  t163 = t21 * t21;
  t164 = t161 * t82 * t163;
  t166 = 0.64e2 * t73 * t13;
  t167 = 0.128e3 * t76;
  t168 = -t166 + t167;
  t169 = t168 * t21;
  t178 = t59 * t59;
  t189 = t31 * t31;
  t190 = t106 * t82 * t189;
  t217 = ((t30 * t32 + t23) * t36 * t38 + (t32 * t55 + t48) * t36 * t59 + t71 + t79 * t32 + (t31 * t83 - t66 + t69 + t86) * t88 + (t31 * t90 - t75 + t78 + t93) * t95) * t98 + (-t101 + t105 + (t106 * t21 - t27 + t29) * t32) * t36 * t112 + ((t119 * t22 * t31 - t126 + t129 + t23 + (t135 * t21 - t52 + t54) * t32) * t36 * t59 - t143 + t144 + ((-t143 + t144) * t21 - t75 + t78) * t32 + (t20 * t32 + t22 * t30) * t36 + (t119 * t154 * t82 + t164 + t169) * t88) * t38 + (t161 * t22 * t31 - t157 + t160 + t48) * t36 * t178 + (t168 * t22 * t31 - t166 + t167 + t71 + (t22 * t55 + t32 * t47) * t36) * t59 + t190 + ((-t126 + t129) * t82 * t21 - t143 + t144) * t31 + t164 + t169 + t79 * t22 + t70 * t32 + ((t21 * t83 + t90) * t31 + t85 * t163 + (-t66 + t69 + t92) * t21 - t75 + t78) * t88 + ((t190 + (t135 * t21 * t82 - t143 + t144) * t31) * t59 + t90 * t189 + (t93 - t75 + t78 + t83) * t31 + t86 - t66 + t69) * t95;
  t222 = -0.128e3 * t14 + 0.256e3 * t18;
  t230 = -0.128e3 * t43 + 0.256e3 * t45;
  t237 = -0.128e3 * t65 + 0.256e3 * t68;
  t250 = -0.128e3 * t26 + 0.256e3 * t28;
  t255 = -0.128e3 * t51 + 0.256e3 * t53;
  t258 = 0.128e3 * t74;
  t259 = 0.256e3 * t77;
  return(At_fH_re * t217 * PREF_R_CA + Bt_fA_re * (t222 * t32 * t36 * t112 + ((-t22 * t222 + t230 * t32) * t36 * t59 + t237 * t32) * t38 - t230 * t22 * t36 * t178 - t237 * t22 * t59 + (t250 * t82 * t154 + t255 * t82 * t163 + (-t258 + t259) * t21) * t88 + (-t250 * t82 * t189 + (-t21 * t255 * t82 + t258 - t259) * t31) * t95) * PREF_R_CA);
}
