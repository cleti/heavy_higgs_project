
#include "AMP_HEADER.h"

double Eval_R_INT_INT_QG (AMP_ARGS)
{

AMP_DEFINITIONS


  double t1;
  double t12;
  double t128;
  double t13;
  double t134;
  double t137;
  double t141;
  double t142;
  double t143;
  double t146;
  double t150;
  double t151;
  double t152;
  double t154;
  double t157;
  double t159;
  double t162;
  double t166;
  double t167;
  double t169;
  double t175;
  double t178;
  double t181;
  double t184;
  double t186;
  double t189;
  double t19;
  double t193;
  double t197;
  double t2;
  double t204;
  double t208;
  double t209;
  double t21;
  double t215;
  double t221;
  double t222;
  double t225;
  double t227;
  double t231;
  double t232;
  double t235;
  double t238;
  double t24;
  double t241;
  double t244;
  double t247;
  double t250;
  double t251;
  double t254;
  double t256;
  double t257;
  double t26;
  double t260;
  double t261;
  double t264;
  double t269;
  double t278;
  double t283;
  double t288;
  double t295;
  double t296;
  double t3;
  double t30;
  double t313;
  double t318;
  double t33;
  double t35;
  double t39;
  double t4;
  double t44;
  double t45;
  double t46;
  double t47;
  double t49;
  double t5;
  double t52;
  double t55;
  double t56;
  double t57;
  double t59;
  double t6;
  double t63;
  double t64;
  double t69;
  double t70;
  double t75;
  double t76;
  double t81;
  double t83;
  double t90;
  double t97;
  double t99;
  t1 = sp(k1, p2);
  t2 = sp(p2, p3);
  t3 = t1 * t2;
  t4 = sp(p1, p2);
  t5 = sp(k2, p3);
  t6 = t4 * t5;
  t12 = sp(k2, p1);
  t13 = t4 * t12;
  t19 = sp(k1, p3);
  t21 = t19 * t12 * At_fH_re;
  t24 = sp(k1, p1);
  t26 = t24 * t12 * At_fH_re;
  t30 = t5 * t12 * At_fH_re;
  t33 = t1 * t4;
  t35 = t19 * t5 * At_fH_re;
  t39 = t24 * t5 * At_fH_re;
  t44 = sp(p1, p3);
  t45 = t44 * t2;
  t46 = sp(k2, p2);
  t47 = sp(k1, k2);
  t49 = t46 * t47 * At_fH_re;
  t52 = t44 * t4;
  t55 = t2 * t4;
  t56 = t46 * t19;
  t57 = t56 * At_fH_re;
  t59 = -t13 * t3 * At_fH_re - 0.2e1 * t13 * t3 * Bt_fA_re + t3 * t6 * At_fH_re + 0.2e1 * t3 * t6 * Bt_fA_re - 0.2e1 * t21 * t3 - 0.2e1 * t26 * t3 + 0.2e1 * t3 * t30 - 0.2e1 * t30 * t33 + 0.2e1 * t33 * t35 + 0.2e1 * t33 * t39 + 0.2e1 * t45 * t49 - 0.2e1 * t49 * t52 + t55 * t57;
  t63 = t46 * t24;
  t64 = t63 * At_fH_re;
  t69 = t46 * t5;
  t70 = t69 * At_fH_re;
  t75 = t46 * t12;
  t76 = t75 * At_fH_re;
  t81 = t2 * t46;
  t83 = t19 * t24 * At_fH_re;
  t90 = t4 * t46;
  t97 = 0.2e1 * t55 * t56 * Bt_fA_re - 0.2e1 * t55 * t63 * Bt_fA_re + 0.2e1 * t55 * t69 * Bt_fA_re - 0.2e1 * t55 * t75 * Bt_fA_re + 0.2e1 * t21 * t90 - 0.2e1 * t26 * t81 + 0.2e1 * t35 * t90 - 0.2e1 * t39 * t81 - t55 * t64 - t55 * t70 + t55 * t76 + 0.2e1 * t81 * t83 - 0.2e1 * t83 * t90;
  t99 = t1 * t44;
  t128 = t4 * t19;
  t134 = t4 * t24;
  t137 = 0.2e1 * t2 * t47 * t99 * At_fH_re - 0.2e1 * t4 * t47 * t99 * At_fH_re - t128 * t3 * At_fH_re + 0.2e1 * t128 * t3 * Bt_fA_re + t134 * t3 * At_fH_re - 0.2e1 * t81 * t99 * At_fH_re - 0.4e1 * t81 * t99 * Bt_fA_re + 0.2e1 * t90 * t99 * At_fH_re + 0.4e1 * t90 * t99 * Bt_fA_re + 0.2e1 * t57 * t99 - 0.2e1 * t64 * t99 + 0.2e1 * t70 * t99 - 0.2e1 * t76 * t99;
  t141 = t2 * t2;
  t142 = t1 * t141;
  t143 = t12 * Bt_fA_re;
  t146 = t12 * t12;
  t150 = t4 * t4;
  t151 = t1 * t150;
  t152 = t19 * At_fH_re;
  t154 = t19 * Bt_fA_re;
  t157 = t5 * At_fH_re;
  t159 = t5 * Bt_fA_re;
  t162 = t5 * t5;
  t166 = t46 * t46;
  t167 = t166 * At_fH_re;
  t169 = t166 * Bt_fA_re;
  t175 = t44 * t166;
  t178 = -0.2e1 * t134 * t3 * Bt_fA_re + 0.2e1 * t146 * t3 * At_fH_re - 0.2e1 * t162 * t33 * At_fH_re - 0.2e1 * t142 * t143 - t151 * t152 + 0.2e1 * t151 * t154 + t151 * t157 + 0.2e1 * t151 * t159 - 0.2e1 * t152 * t175 + t167 * t45 - t167 * t52 - 0.2e1 * t169 * t45 + 0.2e1 * t169 * t52;
  t181 = t24 * At_fH_re;
  t184 = t141 * t46;
  t186 = t24 * Bt_fA_re;
  t189 = t12 * At_fH_re;
  t193 = t24 * t24;
  t197 = t150 * t46;
  t204 = t19 * t19;
  t208 = EPS_(k1, p1, p2, p3);
  t209 = t208 * t1;
  t215 = 0.2e1 * t193 * t81 * At_fH_re + 0.2e1 * t2 * t209 * At_fA_re + t2 * t209 * Bt_fH_re - 0.2e1 * t204 * t90 * At_fH_re - 0.2e1 * t143 * t184 + t152 * t197 + 0.2e1 * t154 * t197 - t157 * t197 + 0.2e1 * t159 * t197 + 0.2e1 * t175 * t181 - t181 * t184 - 0.2e1 * t184 * t186 + t184 * t189;
  t221 = t208 * t2;
  t222 = t46 * At_fA_re;
  t225 = t46 * Bt_fH_re;
  t227 = t208 * t4;
  t231 = t208 * t46;
  t232 = t19 * At_fA_re;
  t235 = t24 * At_fA_re;
  t238 = t5 * At_fA_re;
  t241 = t12 * At_fA_re;
  t244 = t2 * At_fH_re;
  t247 = t4 * At_fH_re;
  t250 = EPS_(k1, k2, p2, p3);
  t251 = t250 * At_fA_re;
  t254 = 0.2e1 * t209 * t4 * At_fA_re + t209 * t4 * Bt_fH_re - 0.2e1 * t221 * t222 + t221 * t225 - 0.2e1 * t222 * t227 + t225 * t227 + 0.4e1 * t231 * t232 + 0.4e1 * t231 * t235 - 0.4e1 * t231 * t238 - 0.4e1 * t231 * t241 - 0.2e1 * t244 * t99 + 0.2e1 * t247 * t99 - 0.4e1 * t251 * t99;
  t256 = EPS_(k1, k2, p1, p2);
  t257 = t256 * At_fA_re;
  t260 = EPS_(k2, p1, p2, p3);
  t261 = t260 * At_fA_re;
  t264 = t260 * Bt_fH_re;
  t269 = t1 * t260;
  t278 = t46 * At_fH_re;
  t283 = t44 * t46;
  t288 = -0.4e1 * t232 * t269 - 0.4e1 * t235 * t269 + 0.4e1 * t238 * t269 + 0.4e1 * t241 * t269 + 0.4e1 * t251 * t283 + 0.4e1 * t257 * t283 - 0.4e1 * t257 * t99 - 0.2e1 * t261 * t3 - 0.2e1 * t261 * t33 + t264 * t3 + t264 * t33 - 0.2e1 * t278 * t45 + 0.2e1 * t278 * t52;
  t295 = t1 * t1;
  t296 = t295 * t44;
  t313 = -0.2e1 * t2 * t296 * Bt_fA_re + 0.2e1 * t296 * t4 * Bt_fA_re + t142 * t181 - 0.2e1 * t142 * t186 - t142 * t189 - 0.2e1 * t157 * t296 + 0.2e1 * t189 * t296 + t244 * t296 - t247 * t296 + 0.2e1 * t261 * t81 + 0.2e1 * t261 * t90 + t264 * t81 + t264 * t90;
  t318 = t44 * t44;
  return(0.32e2 * PREF_R * (t59 + t97 + t137 + t178 + t215 + t254 + t288 + t313) / t318 / t46 / t1);
}
