
#include "UID_HEADER.h"

double Eval_UID_0ES0 (UID_ARGS)
{

UID_DEFINITIONS;
  HP_REFS_PHIxQCD(hp);
  AP_REFS_R(ap);


  double t10;
  double t105;
  double t106;
  double t109;
  double t11;
  double t113;
  double t114;
  double t119;
  double t12;
  double t120;
  double t121;
  double t122;
  double t13;
  double t130;
  double t14;
  double t141;
  double t144;
  double t145;
  double t147;
  double t149;
  double t15;
  double t150;
  double t151;
  double t159;
  double t16;
  double t17;
  double t180;
  double t184;
  double t187;
  double t188;
  double t19;
  double t191;
  double t21;
  double t215;
  double t216;
  double t22;
  double t220;
  double t23;
  double t236;
  double t239;
  double t24;
  double t244;
  double t246;
  double t25;
  double t251;
  double t253;
  double t256;
  double t257;
  double t258;
  double t259;
  double t26;
  double t260;
  double t261;
  double t262;
  double t263;
  double t264;
  double t265;
  double t267;
  double t268;
  double t269;
  double t27;
  double t270;
  double t271;
  double t278;
  double t28;
  double t283;
  double t285;
  double t29;
  double t292;
  double t297;
  double t3;
  double t30;
  double t31;
  double t312;
  double t315;
  double t33;
  double t331;
  double t34;
  double t35;
  double t37;
  double t38;
  double t39;
  double t40;
  double t41;
  double t43;
  double t44;
  double t46;
  double t48;
  double t5;
  double t50;
  double t51;
  double t53;
  double t54;
  double t56;
  double t57;
  double t61;
  double t62;
  double t63;
  double t64;
  double t65;
  double t69;
  double t7;
  double t71;
  double t76;
  double t8;
  double t82;
  double t84;
  double t85;
  double t86;
  double t9;
  double t96;
  double t98;
  double t99;
  t3 = Z(k1, p3, p2);
  t5 = Z(p3, k1, p2);
  t7 = 0.1e1 / t3 / t5;
  t8 = sp(p1, p3);
  t9 = t7 * t8;
  t10 = t3 * t3;
  t11 = 0.1e1 / t10;
  t12 = sp(k1, p1);
  t13 = t11 * t12;
  t14 = t9 - t13;
  t15 = 0.256e3 * t14;
  t16 = sp(K1, p1);
  t17 = 0.1e1 / t16;
  t19 = sp(K1, k1);
  t21 = 0.256e3 * t11;
  t22 = sp(k1, p3);
  t23 = t7 * t22;
  t24 = 0.512e3 * t23;
  t25 = t5 * t5;
  t26 = 0.1e1 / t25;
  t27 = t26 * t8;
  t28 = t7 * t12;
  t29 = -t27 + t28;
  t30 = 0.768e3 * t29;
  t31 = sp(P2, p3);
  t33 = t8 * t8;
  t34 = t26 * t33;
  t35 = 0.512e3 * t34;
  t37 = t7 * t12 * t8;
  t38 = 0.1024e4 * t37;
  t39 = t12 * t12;
  t40 = t11 * t39;
  t41 = 0.512e3 * t40;
  t43 = sp(P2, p1);
  t44 = 0.1e1 / t43;
  t46 = 0.768e3 * t14;
  t48 = sp(P2, k1);
  t50 = -t15;
  t51 = sp(k1, k2);
  t53 = 0.256e3 * t29;
  t54 = sp(K1, p3);
  t56 = sp(k2, p3);
  t57 = t7 * t56;
  t61 = t26 * t56;
  t62 = t61 * t8;
  t63 = 0.256e3 * t62;
  t64 = 0.128e3 * t40;
  t65 = 0.128e3 * t34;
  t69 = sp(K1, P2);
  t71 = -t30;
  t76 = t7 * t56 * t12;
  t82 = 0.512e3 * t7 * t43 * t54;
  t84 = 0.256e3 * t57;
  t85 = t11 * t51;
  t86 = 0.256e3 * t85;
  t96 = sp(P2, k2);
  t98 = sp(k2, p1);
  t99 = t98 * t31;
  t105 = t11 * t98;
  t106 = 0.256e3 * t105;
  t109 = t19 * t19;
  t113 = t31 * t31;
  t114 = t26 * t113;
  t119 = t7 * t98 * t22;
  t120 = 0.512e3 * t119;
  t121 = t11 * t44;
  t122 = t48 * t48;
  t130 = -0.128e3 * t14;
  t141 = -t12 * t7 * t98 + t27 * t98;
  t144 = t26 * t43;
  t145 = t54 * t54;
  t147 = 0.256e3 * t144 * t145;
  t149 = 0.256e3 * t61;
  t150 = t7 * t51;
  t151 = 0.256e3 * t150;
  t159 = -t7 * t8 * t98 + t105 * t12;
  t180 = t105 * t122;
  t184 = -t85 + t57;
  t187 = t7 * t99;
  t188 = 0.256e3 * t187;
  t191 = t26 * t31;
  t215 = t11 * t48;
  t216 = t7 * t31;
  t220 = t11 * t43;
  t236 = t11 * t122;
  t239 = t7 * t31 * t48;
  t244 = t114 * t98;
  t246 = t150 - t61;
  t251 = 0.1e1 / t69;
  t253 = (t15 * t17 * t19 + t21 - t24 + (t30 * t31 - t35 + t38 - t41) * t44 + t46 * t44 * t48 + (t50 * t51 + t53 * t54 + (-0.256e3 * t57 - 0.256e3 * t9) * t12 + t63 + t64 + t65) * t17) * t69 + t71 * t54 + 0.512e3 * t14 * t51 + 0.512e3 * t76 + (-0.768e3 * t9 + 0.768e3 * t13 + (-t82 + (-0.128e3 * t13 + t84 - t86 + 0.128e3 * t9) * t43) * t17) * t19 + (-t44 * t46 * t96 - 0.512e3 * t44 * t7 * t99) * t48 + t106 - 0.512e3 * t62 + 0.256e3 * t11 * t17 * t43 * t109 + 0.256e3 * t114 * t98 * t44 - t120 + 0.256e3 * t121 * t98 * t122 + ((-t64 + 0.256e3 * t37 - t65) * t96 + (t130 * t51 - 0.128e3 * t105 + 0.256e3 * t119 + 0.128e3 * t62 - 0.128e3 * t76) * t43 + 0.128e3 * t141 * t31 + t147 + (0.128e3 * t28 - t149 + t151 - 0.128e3 * t27) * t43 * t54 + 0.128e3 * t159 * t48) * t17 + (0.512e3 * t31 * t44 * t48 * t7 - 0.256e3 * t113 * t26 * t44 - 0.256e3 * t121 * t122 - t21 + t24) * t16 + (-t21 + t24 + (t31 * t71 + t35 - t38 + t41) * t44) * t96 + (0.128e3 * t180 + (-t130 * t96 + 0.128e3 * t184 * t43 - t188) * t48 + ((0.128e3 * t191 + t149 - t151) * t43 + (-0.128e3 * t43 * t7 + 0.256e3 * t7 * t98) * t48 + t53 * t96 - 0.256e3 * t26 * t98 * t31) * t54 + ((-0.256e3 * t23 + 0.128e3 * t11) * t43 + 0.128e3 * t29 * t31) * t96 + ((0.256e3 * t215 - 0.256e3 * t216) * t16 + (0.128e3 * t220 - t106) * t48 + t15 * t96 + t82 + (-0.128e3 * t216 + t86 - t84) * t43 + t188) * t19 - 0.256e3 * t220 * t109 + ((-0.256e3 * t48 * t7 + 0.256e3 * t191) * t54 - 0.128e3 * t236 + 0.256e3 * t239 - 0.128e3 * t114) * t16 + 0.128e3 * t244 - t147 + 0.128e3 * t246 * t31 * t43) * t251;
  t256 = EPS_(P2, k1, k2, p1);
  t257 = t7 * t256;
  t258 = EPS_(P2, k2, p1, p3);
  t259 = t26 * t258;
  t260 = EPS_(K1, P2, k1, p1);
  t261 = t7 * t260;
  t262 = EPS_(K1, P2, p1, p3);
  t263 = t26 * t262;
  t264 = t257 - t259 - t261 - t263;
  t265 = 0.512e3 * t264;
  t267 = t7 * t258;
  t268 = t11 * t260;
  t269 = t7 * t262;
  t270 = t11 * t256;
  t271 = t267 + t268 + t269 - t270;
  t278 = 0.512e3 * t271;
  t283 = 0.256e3 * t264;
  t285 = 0.256e3 * t271;
  t292 = -0.512e3 * t269 - 0.512e3 * t268;
  t297 = 0.512e3 * t261 + 0.512e3 * t263;
  t312 = -0.128e3 * t268 - 0.128e3 * t269 - 0.128e3 * t270 + 0.128e3 * t267;
  t315 = 0.128e3 * t261 + 0.128e3 * t263 + 0.128e3 * t257 - 0.128e3 * t259;
  t331 = -0.512e3 * t37 + 0.256e3 * t40 + 0.256e3 * t34;
  return(At_fH_re * t253 * PREF_R_CA + At_fA_re * ((0.1024e4 * t12 * t271 + 0.1024e4 * t264 * t8 + t265 * t31) * t44 + t278 * t44 * t48 + (-t19 * t278 - t265 * t54 + t283 * t31 + t285 * t48) * t251 + (-t12 * t285 - t283 * t8 + t292 * t51 - t297 * t54 + t297 * t56) * t17 - t292 * t17 * t19) * PREF_R_CA + Bt_fH_re * ((t31 * t315 + t312 * t48) * t251 + (-t12 * t312 - t315 * t8) * t17) * PREF_R_CA + Bt_fA_re * (t331 * t17 * t69 + (-0.256e3 * t180 + (-0.256e3 * t31 * t43 * t7 + 0.256e3 * t215 * t43) * t19 + (-0.256e3 * t43 * t48 * t7 + 0.256e3 * t144 * t31) * t54 + (-0.256e3 * t236 + 0.512e3 * t239 - 0.256e3 * t114) * t16 + ((-t21 + t24) * t43 - t53 * t31) * t96 - 0.256e3 * t246 * t31 * t43 + (-0.256e3 * t184 * t43 + t50 * t96 + 0.512e3 * t187) * t48 - 0.256e3 * t244) * t251 + t15 * t43 * t17 * t19 + (t331 * t96 + t53 * t43 * t54 - 0.256e3 * t141 * t31 - 0.256e3 * t159 * t48 + (t15 * t51 + t106 - t120 - t63 + 0.256e3 * t76) * t43) * t17) * PREF_R_CA);
}
