double Eval_UID_SE00 (
		      PS_2_3 const& ps,
		      PS_2_2 const& ps_red
		      ) 
{
#include "EVAL_UID_PS_REFS.cpp"
  
  double t10;
  double t101;
  double t104;
  double t11;
  double t118;
  double t119;
  double t12;
  double t13;
  double t130;
  double t133;
  double t138;
  double t15;
  double t16;
  double t166;
  double t169;
  double t170;
  double t177;
  double t178;
  double t179;
  double t183;
  double t189;
  double t19;
  double t190;
  double t192;
  double t196;
  double t2;
  double t202;
  double t21;
  double t213;
  double t214;
  double t219;
  double t228;
  double t23;
  double t234;
  double t25;
  double t265;
  double t27;
  c_double t273;
  double t274;
  double t28;
  double t29;
  double t3;
  double t31;
  double t35;
  double t36;
  double t39;
  double t4;
  double t43;
  double t44;
  double t51;
  double t52;
  double t53;
  double t54;
  double t55;
  double t58;
  double t6;
  double t60;
  double t64;
  double t66;
  double t68;
  double t7;
  double t71;
  double t75;
  double t78;
  double t82;
  double t85;
  double t86;
  double t9;
  double t93;
  t2 = CA * CA;
  t3 = FA0 * CF * t2;
  t4 = AlphaS * AlphaS;
  t6 = t4 * AlphaS * 0.3141592653589793e1;
  t7 = t6 * At;
  t9 = VF(t3 * t7);
  t10 = sp(P2, K1);
  t11 = sp(p2, p1);
  t12 = t10 * t11;
  t13 = sp(K1, p3);
  t15 = sp(K1, p1);
  t16 = t15 * t11;
  t19 = sp(P2, p3);
  t21 = sp(p3, p1);
  t23 = sp(K2, p3);
  t25 = sp(p3, p2);
  t27 = t25 * t10 * t15;
  t28 = sp(K2, p1);
  t29 = t28 * t25;
  t31 = t15 * t15;
  t35 = sp(P2, p1);
  t36 = t15 * t25 * t35;
  t39 = 0.1e1 / t10;
  t43 = 0.1e1 / t11 / t15;
  t44 = EPS_(K1, P2, p1, p3);
  t51 = VF(FH0 * CF * t2 * t7);
  t52 = t51 * t13;
  t53 = t52 * t19;
  t54 = t15 * t28;
  t55 = t54 * t11;
  t58 = t52 * t21;
  t60 = t10 * t15 * t11;
  t64 = t10 * t35 * t11;
  t66 = sp(P2, K2);
  t68 = t15 * t66 * t11;
  t71 = t52 * t23;
  t75 = t15 * t35 * t11;
  t78 = t52 * t10;
  t82 = t35 * t28 * t25;
  t85 = t51 * t19;
  t86 = t85 * t21;
  t93 = t85 * t23;
  t101 = t10 * t11 * t28 * t86 - 0.2e1 * t10 * t25 * t54 * t85 - 0.2e1 * t36 * t78 + 0.2e1 * t53 * t55 - 0.2e1 * t58 * t60 - t58 * t64 + 0.2e1 * t58 * t68 - 0.2e1 * t60 * t86 + 0.2e1 * t60 * t93 - 0.2e1 * t64 * t71 + t68 * t86 - 0.2e1 * t71 * t75 + t75 * t93 + 0.2e1 * t78 * t82;
  t104 = t51 * t21;
  t118 = VF(t3 * t6 * Bt);
  t119 = t35 * t11 * t118;
  t130 = t19 * t21;
  t133 = t28 * t11 * t118;
  t138 = t66 * t11 * t118;
  t166 = t85 * t15 * t82 + t104 * t23 * t64 - t104 * t10 * t36 + t104 * t15 * t35 * t66 * t25 - 0.2e1 * t13 * t19 * t15 * t119 - 0.2e1 * t13 * t21 * t10 * t119 - 0.4e1 * t118 * t19 * t21 * t60 - 0.2e1 * t130 * t10 * t133 - 0.2e1 * t130 * t15 * t138 - 0.2e1 * t19 * t23 * t15 * t119 - 0.2e1 * t19 * t15 * t35 * t29 * t118 - 0.2e1 * t21 * t23 * t10 * t119 - 0.2e1 * t118 * t35 * t21 * t27 - 0.2e1 * t21 * t15 * t35 * t66 * t25 * t118 - 0.2e1 * t53 * t60;
  t169 = t19 * t19;
  t170 = t51 * t169;
  t177 = t21 * t21;
  t178 = t51 * t177;
  t179 = t10 * t10;
  t183 = t11 * t118;
  t189 = t51 * t23;
  t190 = t35 * t35;
  t192 = t15 * t190 * t25;
  t196 = t190 * t25 * t118;
  t202 = t19 * t31;
  t213 = t13 * t13;
  t214 = t51 * t213;
  t219 = -t53 * t75 + t170 * t31 * t11 + 0.2e1 * t85 * t31 * t15 * t25 + t178 * t179 * t11 + 0.2e1 * t169 * t31 * t183 + 0.2e1 * t177 * t179 * t183 - t189 * t192 + 0.2e1 * t13 * t15 * t196 + 0.2e1 * t169 * t15 * t133 - 0.2e1 * t202 * t35 * t25 * t118 + 0.2e1 * t177 * t10 * t138 + 0.2e1 * t23 * t15 * t196 + 0.2e1 * t214 * t64 + 0.2e1 * t214 * t75;
  t228 = t31 * t35 * t25;
  t234 = t10 * t31 * t25;
  t265 = -0.2e1 * t52 * t202 * t11 - 0.2e1 * t52 * t21 * t179 * t11 - 0.2e1 * t52 * t228 + t52 * t192 - t170 * t55 + 0.2e1 * t85 * t234 - t85 * t228 - 0.2e1 * t85 * t31 * t28 * t25 - t178 * t10 * t66 * t11 + 0.2e1 * t104 * t23 * t179 * t11 + 0.2e1 * t104 * t179 * t15 * t25 - 0.2e1 * t104 * t179 * t28 * t25 + 0.2e1 * t104 * t234 - 0.2e1 * t104 * t31 * t66 * t25 + 0.2e1 * t189 * t228;
  t273 = DenS(P2 + p1, mH, GammaH);
  t274 = RE(t273);
  return((0.1024e4 * t9 * (t10 * t29 + t12 * t13 - t12 * t21 - t12 * t23 + 0.2e1 * t13 * t16 - t16 * t19 - 0.2e1 * t25 * t31 - t27 + t36) * t39 * t43 * t44 - 0.256e3 * (t101 + t166 + t219 + t265) * t39 * t43) * t274);
}
