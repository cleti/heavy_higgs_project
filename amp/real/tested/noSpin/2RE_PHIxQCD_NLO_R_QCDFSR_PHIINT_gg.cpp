double Eval_R_FSR_INT (AMP_2_3_ARGS)
{

  AMP_2_3_4VEC_REFS(ps);

  double t1;
  double t10;
  double t100;
  double t101;
  double t11;
  double t111;
  double t112;
  double t113;
  double t114;
  double t116;
  double t117;
  double t119;
  double t12;
  double t120;
  double t129;
  double t13;
  double t132;
  double t133;
  double t14;
  double t144;
  double t145;
  double t15;
  double t152;
  double t16;
  double t165;
  double t167;
  double t17;
  double t174;
  double t18;
  double t181;
  double t182;
  double t184;
  double t185;
  double t188;
  double t19;
  double t194;
  double t2;
  double t207;
  double t209;
  double t214;
  double t217;
  double t218;
  double t219;
  double t22;
  double t222;
  double t225;
  double t227;
  double t229;
  double t23;
  double t236;
  double t238;
  double t239;
  double t242;
  double t245;
  double t248;
  double t251;
  double t252;
  double t257;
  double t258;
  double t259;
  double t26;
  double t267;
  double t27;
  double t270;
  double t272;
  double t273;
  double t274;
  double t277;
  double t278;
  double t279;
  double t28;
  double t284;
  double t285;
  double t29;
  double t290;
  double t294;
  double t295;
  double t3;
  double t30;
  double t321;
  double t326;
  double t336;
  double t34;
  double t35;
  double t365;
  double t367;
  double t369;
  double t37;
  double t370;
  double t371;
  double t374;
  double t380;
  double t381;
  double t384;
  double t386;
  double t397;
  double t407;
  double t412;
  double t413;
  double t417;
  double t418;
  double t419;
  double t423;
  double t427;
  double t434;
  double t44;
  double t441;
  double t442;
  double t45;
  double t451;
  double t452;
  double t453;
  double t459;
  double t465;
  double t468;
  double t469;
  double t470;
  double t476;
  double t48;
  double t481;
  double t484;
  double t486;
  double t488;
  double t49;
  double t493;
  double t498;
  double t499;
  c_double t5;
  double t501;
  double t502;
  double t503;
  double t504;
  double t509;
  double t51;
  double t512;
  double t52;
  double t521;
  double t53;
  double t536;
  double t550;
  double t56;
  double t568;
  double t569;
  double t57;
  double t570;
  double t573;
  double t575;
  double t576;
  double t577;
  double t59;
  double t591;
  double t595;
  double t596;
  double t6;
  double t60;
  double t603;
  double t607;
  double t608;
  double t61;
  double t614;
  double t62;
  double t63;
  double t634;
  double t635;
  double t636;
  double t638;
  double t639;
  double t64;
  double t641;
  double t646;
  double t648;
  double t65;
  double t657;
  double t658;
  double t659;
  double t66;
  double t664;
  double t67;
  double t671;
  double t685;
  double t687;
  double t692;
  double t694;
  double t7;
  double t711;
  double t712;
  double t721;
  double t725;
  double t726;
  double t729;
  double t737;
  double t77;
  double t776;
  double t779;
  double t789;
  double t794;
  double t8;
  double t810;
  double t813;
  double t816;
  double t818;
  double t82;
  double t820;
  double t828;
  double t831;
  double t86;
  double t87;
  double t883;
  double t885;
  double t895;
  double t9;
  double t90;
  double t91;
  double t97;
  double t98;
  double t99;
  t1 = sp(p2, k1);
  t2 = sp(p3, p2);
  t3 = t1 * t2;
  t5 = DenS(k1 + k2, mH, GammaH);
  t6 = RE(t5);
  t7 = t3 * t6;
  t8 = sp(p3, p1);
  t9 = t2 + t8;
  t10 = 0.1e1 / t9;
  t11 = sp(p3, k1);
  t12 = 0.1e1 / t11;
  t13 = t10 * t12;
  t14 = sp(p2, k2);
  t15 = 0.1e1 / t14;
  t16 = sp(p2, p1);
  t17 = 0.1e1 / t16;
  t18 = t15 * t17;
  t19 = t13 * t18;
  t22 = t2 * t6;
  t23 = t13 * t17;
  t26 = t22 * t13;
  t27 = 0.256e3 * t26;
  t28 = t2 * t2;
  t29 = t28 * t6;
  t30 = t29 * t23;
  t34 = sp(p3, k2);
  t35 = 0.1e1 / t34;
  t37 = 0.1e1 / t1;
  t44 = sp(p1, k2);
  t45 = 0.1e1 / t44;
  t48 = sp(p1, k1);
  t49 = t48 * t48;
  t51 = t1 * t1;
  t52 = t51 * t8;
  t53 = t52 * t6;
  t56 = t6 * t12;
  t57 = t56 * t17;
  t59 = t8 - t2;
  t60 = t6 * t59;
  t61 = t9 * t9;
  t62 = 0.1e1 / t61;
  t63 = t60 * t62;
  t64 = 0.512e3 * t63;
  t65 = t8 * t6;
  t66 = t65 * t13;
  t67 = 0.256e3 * t66;
  t77 = t59 * t10 * t12;
  t82 = 0.256e3 * t63;
  t86 = 0.5e1 * t2;
  t87 = t8 - t86;
  t90 = 0.128e3 * t22 * t87 * t62;
  t91 = 0.3e1 * t8;
  t97 = 0.64e2 * t22;
  t98 = t8 * t8;
  t99 = 0.3e1 * t98;
  t100 = t2 * t8;
  t101 = 0.20e2 * t100;
  t111 = t2 * t16;
  t112 = t6 * t10;
  t113 = t112 * t35;
  t114 = t111 * t113;
  t116 = 0.3e1 * t2;
  t117 = t8 + t116;
  t119 = t62 * t35;
  t120 = t119 * t11;
  t129 = t6 * t35;
  t132 = t91 + t2;
  t133 = t132 * t2;
  t144 = t112 * t12;
  t145 = t111 * t144;
  t152 = 0.16e2 * t100;
  t165 = t98 * t6;
  t167 = t12 * t15;
  t174 = 0.128e3 * t22;
  t181 = t8 * t16;
  t182 = t181 * t144;
  t184 = 0.5e1 * t8;
  t185 = t184 - t2;
  t188 = 0.128e3 * t65 * t185 * t62;
  t194 = 0.64e2 * t65;
  t207 = t16 * t6 * t35;
  t209 = t6 * t117;
  t214 = t6 * (t98 + t28);
  t217 = 0.4e1 * t8;
  t218 = 0.4e1 * t2;
  t219 = 0.2e1 * t100;
  t222 = t10 * t35;
  t225 = t100 * t144;
  t227 = -t65 - t22;
  t229 = 0.64e2 * t227 * t35;
  t236 = t16 * t16;
  t238 = t60 * t62 * t236;
  t239 = 0.128e3 * t238;
  t242 = 0.128e3 * t60 * t62 * t11;
  t245 = t6 * (t217 - t218 + 0.5e1 * t98 - t28);
  t248 = 0.128e3 * t225;
  t251 = t11 * t6;
  t252 = 0.64e2 * t251;
  t257 = 0.32e2 * t60 * (t98 + 0.10e2 * t100 + t28) * t62;
  t258 = t100 * t6;
  t259 = t8 - t116;
  t267 = 0.64e2 * t258 * t9 * t12 * t17;
  t270 = t35 * t11;
  t272 = t63 * t270 * t236;
  t273 = 0.128e3 * t272;
  t274 = t11 * t11;
  t277 = 0.128e3 * t60 * t119 * t274;
  t278 = 0.8e1 * t100;
  t279 = 0.3e1 * t28;
  t284 = t100 * t113;
  t285 = 0.128e3 * t284;
  t290 = 0.64e2 * t274 * t6 * t35;
  t294 = t100 * t129;
  t295 = 0.64e2 * t294;
  t321 = t6 * (t217 - t218 + t98 - 0.5e1 * t28);
  t326 = t91 - t2;
  t336 = t181 * t113;
  t365 = 0.1e1 / t48;
  t367 = (0.512e3 * t7 * t19 + 0.512e3 * t22 * t23 + (-t27 + 0.512e3 * t30) * t15 + 0.128e3 * t22 * t35 * t17 * t37 + (-0.512e3 * t23 * t7 - 0.512e3 * t30) * t45) * t49 + (-0.512e3 * t53 * t19 + (-0.512e3 * t57 + (t64 + t67) * t15) * t1 + t64 + ((0.128e3 * t65 + 0.256e3 * t22) * t35 + 0.512e3 * t22 * t77) * t17 + ((-t82 + 0.128e3 * t26) * t16 + t90 - 0.64e2 * t22 * (0.4e1 + t91 + t2) * t10 * t12 + (t97 + 0.32e2 * t22 * (t99 + t101 + t28) * t10 * t12) * t17) * t15 + (-0.128e3 * t114 - 0.128e3 * t65 * t117 * t120 - 0.64e2 * t22 * (-0.4e1 + t8 + t116) * t10 * t35 + (-0.64e2 * t11 * t129 * t2 + 0.32e2 * t129 * t133) * t17) * t37 + (0.512e3 * t53 * t23 + (-t64 + t27) * t1 - 0.128e3 * t145 - t90 - 0.64e2 * t22 * (-0.4e1 + t8 - t86) * t10 * t12 + (t97 + 0.32e2 * t22 * (t98 - t152 - t28) * t10 * t12) * t17) * t45) * t48 + (-0.512e3 * t10 * t165 * t167 * t17 + 0.512e3 * t23 * t65) * t51 + (-t64 + ((0.256e3 * t65 + t174) * t35 - 0.512e3 * t65 * t77) * t17 + (-0.128e3 * t182 + t188 + 0.64e2 * t65 * (0.4e1 + t184 - t2) * t10 * t12 + (t194 - 0.32e2 * t65 * (t98 + t152 - t28) * t10 * t12) * t17) * t15) * t1 + 0.128e3 * t207 - 0.128e3 * t209 * t132 * t120 + 0.512e3 * t214 * t62 - 0.64e2 * t6 * (t217 + t218 + t98 - t219 + t28) * t222 - 0.512e3 * t225 + (0.32e2 * t132 * t209 * t35 + t11 * t229) * t17 + (t239 + (-0.64e2 * t245 * t62 - t242 + t248) * t16 - t252 + t257 + 0.64e2 * t258 * t259 * t10 * t12 + t267) * t15 + (-t273 + (t277 + 0.64e2 * t6 * (t217 - t218 + t98 + t278 + t279) * t120 - t285) * t16 + t290 - 0.32e2 * t132 * t6 * t270 - t295) * t37 + ((0.512e3 * t165 * t23 - t67) * t51 + ((t82 + 0.128e3 * t66) * t16 - t188 - 0.64e2 * t65 * (0.4e1 + t8 + t116) * t10 * t12 + (t194 + 0.32e2 * t65 * (t98 + t101 + t279) * t10 * t12) * t17) * t1 - t239 + (0.64e2 * t321 * t62 + t242 + t248) * t16 - t252 - t257 - 0.64e2 * t258 * t326 * t10 * t12 + t267) * t45 + (0.128e3 * t52 * t129 * t17 + (-0.128e3 * t336 - 0.128e3 * t133 * t6 * t120 - 0.64e2 * t65 * (-0.4e1 + t91 + t2) * t10 * t35 + (-0.64e2 * t11 * t129 * t8 + 0.32e2 * t117 * t35 * t65) * t17) * t1 + t273 + (-t277 + 0.64e2 * t6 * (-t217 + t218 + t99 + t278 + t28) * t120 - t285) * t16 + t290 - 0.32e2 * t209 * t270 - t295) * t365;
  t369 = 0.128e3 * t56;
  t370 = t60 * t10;
  t371 = 0.128e3 * t370;
  t374 = 0.64e2 * t6 * t9 * t12;
  t380 = 0.256e3 * t60 * t120;
  t381 = t6 * t259;
  t384 = t222 * t11;
  t386 = 0.128e3 * t60 * t384;
  t397 = t6 * t326;
  t407 = EPS_(k1, p1, p2, p3);
  t412 = 0.32e2 * t227;
  t413 = t412 * t12;
  t417 = 0.128e3 * t129;
  t418 = -t412;
  t419 = t418 * t35;
  t423 = t418 * t12;
  t427 = t412 * t35;
  t434 = 0.256e3 * t145;
  t441 = 0.192e3 * t258;
  t442 = 0.64e2 * t29;
  t451 = -t258 + t29;
  t452 = 0.64e2 * t451;
  t453 = t452 * t35;
  t459 = t452 * t12;
  t465 = 0.256e3 * t182;
  t468 = t165 - t258;
  t469 = 0.64e2 * t468;
  t470 = t469 * t12;
  t476 = 0.4e1 * t100;
  t481 = 0.64e2 * t165;
  t484 = (-t481 - 0.384e3 * t258 - t442) * t35;
  t486 = 0.256e3 * t238;
  t488 = t6 * (t98 + t219 - t28);
  t493 = 0.12e2 * t100;
  t498 = t100 * t56;
  t499 = 0.384e3 * t498;
  t501 = t2 * t98;
  t502 = t501 * t6;
  t503 = t28 * t8;
  t504 = t503 * t6;
  t509 = (0.256e3 * t258 + (-0.128e3 * t502 - 0.128e3 * t504) * t12) * t17;
  t512 = 0.256e3 * t272;
  t521 = 0.128e3 * t294;
  t536 = t6 * (t98 - t219 - t28);
  t550 = t469 * t35;
  t568 = t1 * t6;
  t569 = 0.1e1 / t236;
  t570 = t167 * t569;
  t573 = t56 * t569;
  t575 = 0.256e3 * t57;
  t576 = t12 * t569;
  t577 = t22 * t576;
  t591 = t65 - t22;
  t595 = 0.128e3 * t6;
  t596 = 0.256e3 * t6;
  t603 = 0.512e3 * t100 * t573;
  t607 = 0.128e3 * t251 * t35;
  t608 = t596 - t194 - t97;
  t614 = t65 * t576;
  t634 = CA * CA;
  t635 = FA0 * CF * t634;
  t636 = AlphaS * AlphaS;
  t638 = t636 * AlphaS * 0.3141592653589793e1;
  t639 = t638 * At;
  t641 = VF(t635 * t639);
  t646 = t17 * t37;
  t648 = t17 * t45;
  t657 = 0.128e3 * t498;
  t658 = t502 - t504;
  t659 = 0.128e3 * t658;
  t664 = 0.64e2 * t591;
  t671 = t17 * t1;
  t685 = t638 * Bt;
  t687 = VF(t635 * t685);
  t692 = t29 * t576;
  t694 = t12 * t17;
  t711 = 0.256e3 * t370;
  t712 = t65 * t12;
  t721 = 0.256e3 * t60 * t10 * t17;
  t725 = t22 * t12;
  t726 = 0.64e2 * t725;
  t729 = 0.64e2 * t22 * t87 * t10;
  t737 = 0.256e3 * t503 * t573;
  t776 = 0.64e2 * t712;
  t779 = 0.64e2 * t65 * t185 * t10;
  t789 = 0.256e3 * t501 * t573;
  t794 = 0.6e1 * t100;
  t810 = 0.64e2 * t60 * t10 * t16;
  t813 = 0.64e2 * t60 * t10 * t11;
  t816 = 0.64e2 * t498;
  t818 = 0.128e3 * t100 * t370;
  t820 = -0.64e2 * t658;
  t828 = 0.64e2 * t370 * t270 * t16;
  t831 = 0.64e2 * t60 * t222 * t274;
  t883 = FH0 * CF * t634;
  t885 = VF(t883 * t639);
  t895 = VF(t883 * t685);
  return((t367 * FH0 + ((-t82 + t369 + (t371 - t374) * t17) * t15 + (-t380 + 0.128e3 * t381 * t222 + (-0.64e2 * t35 * t381 + t386) * t17) * t37 + (-t82 - t369 + (t371 + t374) * t17) * t45 + (-t380 + 0.128e3 * t397 * t222 + (-0.64e2 * t35 * t397 + t386) * t17) * t365) * t407 * FA0) * PREF_R_CA_At + (((t17 * t413 + t369) * t15 + (t17 * t419 - t417) * t37 + (t17 * t423 - t369) * t45 + (t17 * t427 + t417) * t365) * t407 * FH0 + (((-t434 + 0.256e3 * t22 * (0.2e1 * t8 + t2) * t10 * t12 + (-t441 - t442) * t12 * t17) * t15 + (t17 * t453 - 0.256e3 * t222 * t29 + 0.256e3 * t114) * t37 + (-0.256e3 * t13 * t29 + t17 * t459 + t434) * t45) * t48 + (-0.256e3 * t13 * t165 + t17 * t470 + t465) * t15 * t1 - 0.256e3 * t207 + 0.256e3 * t6 * (t98 + t476 + t28) * t222 + t484 * t17 + (-t486 + (0.256e3 * t488 * t62 - 0.256e3 * t225) * t16 - 0.64e2 * t6 * (t98 + t493 - t28) * t10 + t499 + t509) * t15 + (t512 + (-0.256e3 * t120 * t488 + 0.256e3 * t284) * t16 + 0.64e2 * t6 * (t98 + t476 - t28) * t384 - t521) * t37 + ((-t465 + 0.256e3 * t65 * (t8 + 0.2e1 * t2) * t10 * t12 + (-t481 - t441) * t12 * t17) * t1 + t486 + (-0.256e3 * t536 * t62 - 0.256e3 * t225) * t16 + 0.64e2 * t6 * (t98 - t493 - t28) * t10 + t499 + t509) * t45 + ((-0.256e3 * t165 * t222 + t17 * t550 + 0.256e3 * t336) * t1 - t512 + (0.256e3 * t120 * t536 + 0.256e3 * t284) * t16 - 0.64e2 * t6 * (t98 - t476 - t28) * t384 - t521) * t365) * FA0) * PREF_R_CA_Bt + ((0.512e3 * t568 * t570 + 0.512e3 * t573 + (-t575 + 0.512e3 * t577) * t15 + (-0.512e3 * t568 * t576 - 0.512e3 * t577) * t45) * t48 + (0.512e3 * t570 * t65 - 0.512e3 * t573) * t1 + 0.512e3 * t591 * t12 * t569 + (t369 + (-t595 + (-t596 - 0.320e3 * t65 - t97) * t12) * t17 + t603) * t15 + (-t417 + (t35 * t608 + t607) * t17) * t37 + ((-0.512e3 * t614 + t575) * t1 - t369 + (t595 + (t596 + t194 + 0.320e3 * t22) * t12) * t17 - t603) * t45 + (t417 + (-t35 * t608 - t607) * t17) * t365) * t407 * t641 + ((-t12 * t18 * t452 + t453 * t646 + t459 * t648) * t48 + t470 * t18 * t1 + (t484 - 0.512e3 * t498) * t17 + (t12 * t17 * t659 - t194 + t657 + t97) * t15 + (t11 * t35 * t664 + t521) * t37 + (-t12 * t17 * t659 - t12 * t469 * t671 + t194 + t657 - t97) * t45 + (-t11 * t35 * t664 + t550 * t671 + t521) * t365) * t687 + ((-0.256e3 * t7 * t570 - 0.256e3 * t577 + (0.128e3 * t22 * t694 - 0.256e3 * t692) * t15 + (0.256e3 * t3 * t573 + 0.256e3 * t692) * t45) * t49 + (0.256e3 * t53 * t570 + (-0.256e3 * t227 * t12 * t569 + (-t711 - 0.128e3 * t712) * t17 * t15) * t1 - t721 + 0.256e3 * t451 * t12 * t569 + (t371 - t726 + (-t729 + (t174 + 0.96e2 * t258 + 0.32e2 * t29) * t12) * t17 - t737) * t15 + (0.64e2 * t22 * t35 + (0.64e2 * t22 * t59 * t384 - 0.32e2 * (0.4e1 + t8 - t2) * t2 * t129) * t17) * t37 + (-0.256e3 * t52 * t573 + (t711 - 0.128e3 * t725) * t17 * t1 + t726 + (t729 + (-t174 + 0.32e2 * t258 - 0.160e3 * t29) * t12) * t17 + t737) * t45) * t48 + (0.256e3 * t165 * t570 - 0.256e3 * t614) * t51 + (t721 + 0.256e3 * t468 * t12 * t569 + (t776 + (-t779 + (-0.160e3 * t165 + (-t595 + 0.32e2 * t22) * t8) * t12) * t17 + t789) * t15) * t1 + t229 + (0.64e2 * t6 * (t98 + t794 + t28) * t384 - 0.256e3 * t214 * t10 - 0.32e2 * (-t217 - t218 + t98 + t794 + t28) * t6 * t35 + 0.256e3 * t498) * t17 + (-t810 + t813 + 0.32e2 * t245 * t10 - t816 + (t12 * t820 - t818) * t17) * t15 + (t828 - t831 + 0.32e2 * t6 * (-t217 + t218 + t98 - t476 - t28) * t384 + t295) * t37 + ((-0.256e3 * t165 * t576 + 0.128e3 * t65 * t694) * t51 + (-t371 - t776 + (t779 + (0.32e2 * t165 + (t595 + 0.96e2 * t22) * t8) * t12) * t17 - t789) * t1 + t810 - t813 - 0.32e2 * t321 * t10 - t816 + (-t12 * t820 + t818) * t17) * t45 + ((0.64e2 * t65 * t35 + (-0.64e2 * t65 * t59 * t384 + 0.32e2 * (-0.4e1 + t8 - t2) * t8 * t129) * t17) * t1 - t828 + t831 - 0.32e2 * t6 * (-t217 + t218 + t98 + t476 - t28) * t384 + t295) * t365) * t885 + (t17 * t365 * t427 + t18 * t413 + t419 * t646 + t423 * t648) * t407 * t895);
}
